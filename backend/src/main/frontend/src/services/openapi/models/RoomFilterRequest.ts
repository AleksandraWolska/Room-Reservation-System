/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RoomFilterRequest
 */
export interface RoomFilterRequest {
    /**
     * 
     * @type {Date}
     * @memberof RoomFilterRequest
     */
    from?: Date;
    /**
     * 
     * @type {Date}
     * @memberof RoomFilterRequest
     */
    to?: Date;
    /**
     * 
     * @type {string}
     * @memberof RoomFilterRequest
     */
    buildingName?: string;
    /**
     * 
     * @type {string}
     * @memberof RoomFilterRequest
     */
    roomType?: RoomFilterRequestRoomTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RoomFilterRequest
     */
    isProjector?: boolean;
    /**
     * 
     * @type {number}
     * @memberof RoomFilterRequest
     */
    minPlaces?: number;
    /**
     * 
     * @type {number}
     * @memberof RoomFilterRequest
     */
    maxPlaces?: number;
}


/**
 * @export
 */
export const RoomFilterRequestRoomTypeEnum = {
    LectureRoom: 'LECTURE_ROOM',
    Workshop: 'WORKSHOP',
    ComputersRoom: 'COMPUTERS_ROOM',
    ChemistryLaboratory: 'CHEMISTRY_LABORATORY',
    Office: 'OFFICE'
} as const;
export type RoomFilterRequestRoomTypeEnum = typeof RoomFilterRequestRoomTypeEnum[keyof typeof RoomFilterRequestRoomTypeEnum];


/**
 * Check if a given object implements the RoomFilterRequest interface.
 */
export function instanceOfRoomFilterRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RoomFilterRequestFromJSON(json: any): RoomFilterRequest {
    return RoomFilterRequestFromJSONTyped(json, false);
}

export function RoomFilterRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoomFilterRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'from': !exists(json, 'from') ? undefined : (new Date(json['from'])),
        'to': !exists(json, 'to') ? undefined : (new Date(json['to'])),
        'buildingName': !exists(json, 'buildingName') ? undefined : json['buildingName'],
        'roomType': !exists(json, 'roomType') ? undefined : json['roomType'],
        'isProjector': !exists(json, 'isProjector') ? undefined : json['isProjector'],
        'minPlaces': !exists(json, 'minPlaces') ? undefined : json['minPlaces'],
        'maxPlaces': !exists(json, 'maxPlaces') ? undefined : json['maxPlaces'],
    };
}

export function RoomFilterRequestToJSON(value?: RoomFilterRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from': value.from === undefined ? undefined : (value.from.toISOString()),
        'to': value.to === undefined ? undefined : (value.to.toISOString()),
        'buildingName': value.buildingName,
        'roomType': value.roomType,
        'isProjector': value.isProjector,
        'minPlaces': value.minPlaces,
        'maxPlaces': value.maxPlaces,
    };
}

