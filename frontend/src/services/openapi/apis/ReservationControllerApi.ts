/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Reservation,
} from '../models';
import {
    ReservationFromJSON,
    ReservationToJSON,
} from '../models';

export interface AllByUserEmailRequest {
    email: string;
}

export interface AllByUserIdRequest {
    userId: number;
}

export interface Create1Request {
    reservation: Reservation;
}

export interface Delete1Request {
    id: number;
}

export interface One1Request {
    id: number;
}

export interface One2Request {
    email: string;
    createdAt: Date;
}

export interface ReserveRequest {
    roomId: number;
    userId: number;
    requestBody: Array<Date>;
}

/**
 * 
 */
export class ReservationControllerApi extends runtime.BaseAPI {

    /**
     */
    async all1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reservation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReservationFromJSON));
    }

    /**
     */
    async all1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reservation>> {
        const response = await this.all1Raw(initOverrides);
        return await response.value();
    }

    /**
     */
    async allByUserEmailRaw(requestParameters: AllByUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reservation>>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling allByUserEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/user/email/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReservationFromJSON));
    }

    /**
     */
    async allByUserEmail(requestParameters: AllByUserEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reservation>> {
        const response = await this.allByUserEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async allByUserIdRaw(requestParameters: AllByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Reservation>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling allByUserId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/user/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReservationFromJSON));
    }

    /**
     */
    async allByUserId(requestParameters: AllByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Reservation>> {
        const response = await this.allByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async create1Raw(requestParameters: Create1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.reservation === null || requestParameters.reservation === undefined) {
            throw new runtime.RequiredError('reservation','Required parameter requestParameters.reservation was null or undefined when calling create1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reservation/reservations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReservationToJSON(requestParameters.reservation),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     */
    async create1(requestParameters: Create1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.create1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async delete1Raw(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling delete1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     */
    async delete1(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.delete1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async one1Raw(requestParameters: One1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling one1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     */
    async one1(requestParameters: One1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.one1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async one2Raw(requestParameters: One2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling one2.');
        }

        if (requestParameters.createdAt === null || requestParameters.createdAt === undefined) {
            throw new runtime.RequiredError('createdAt','Required parameter requestParameters.createdAt was null or undefined when calling one2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/reservations/{email}{createdAt}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters.email))).replace(`{${"createdAt"}}`, encodeURIComponent(String(requestParameters.createdAt))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     */
    async one2(requestParameters: One2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.one2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async reserveRaw(requestParameters: ReserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reservation>> {
        if (requestParameters.roomId === null || requestParameters.roomId === undefined) {
            throw new runtime.RequiredError('roomId','Required parameter requestParameters.roomId was null or undefined when calling reserve.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling reserve.');
        }

        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling reserve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reservation/reservations/{roomId}{userId}`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters.roomId))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReservationFromJSON(jsonValue));
    }

    /**
     */
    async reserve(requestParameters: ReserveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reservation> {
        const response = await this.reserveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
