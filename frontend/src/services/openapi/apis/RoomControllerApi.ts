/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailabilityAtResponse,
  Room,
  RoomFilterRequest,
  RoomTO,
  TimeRequest,
} from '../models';
import {
    AvailabilityAtResponseFromJSON,
    AvailabilityAtResponseToJSON,
    RoomFromJSON,
    RoomToJSON,
    RoomFilterRequestFromJSON,
    RoomFilterRequestToJSON,
    RoomTOFromJSON,
    RoomTOToJSON,
    TimeRequestFromJSON,
    TimeRequestToJSON,
} from '../models';

export interface DeleteRequest {
    name: string;
    number: number;
}

export interface AllInBuildingRequest {
    buildingName: string;
}

export interface CreateRequest {
    roomTO: RoomTO;
}

export interface FilterRequest {
    roomFilterRequest: RoomFilterRequest;
}

export interface OneRequest {
    buildingName: string;
    number: number;
}

export interface WhenIsFreeRequest {
    id: number;
    request: TimeRequest;
}

/**
 * 
 */
export class RoomControllerApi extends runtime.BaseAPI {

    /**
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling _delete.');
        }

        if (requestParameters.number === null || requestParameters.number === undefined) {
            throw new runtime.RequiredError('number','Required parameter requestParameters.number was null or undefined when calling _delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/rooms/{name},{number}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))).replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this._deleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async allRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/rooms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     */
    async all(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.allRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async allInBuildingRaw(requestParameters: AllInBuildingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        if (requestParameters.buildingName === null || requestParameters.buildingName === undefined) {
            throw new runtime.RequiredError('buildingName','Required parameter requestParameters.buildingName was null or undefined when calling allInBuilding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/rooms/{buildingName}`.replace(`{${"buildingName"}}`, encodeURIComponent(String(requestParameters.buildingName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     */
    async allInBuilding(requestParameters: AllInBuildingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.allInBuildingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.roomTO === null || requestParameters.roomTO === undefined) {
            throw new runtime.RequiredError('roomTO','Required parameter requestParameters.roomTO was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reservation/rooms/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomTOToJSON(requestParameters.roomTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async filterRaw(requestParameters: FilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Room>>> {
        if (requestParameters.roomFilterRequest === null || requestParameters.roomFilterRequest === undefined) {
            throw new runtime.RequiredError('roomFilterRequest','Required parameter requestParameters.roomFilterRequest was null or undefined when calling filter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reservation/rooms/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoomFilterRequestToJSON(requestParameters.roomFilterRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RoomFromJSON));
    }

    /**
     */
    async filter(requestParameters: FilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Room>> {
        const response = await this.filterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async oneRaw(requestParameters: OneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Room>> {
        if (requestParameters.buildingName === null || requestParameters.buildingName === undefined) {
            throw new runtime.RequiredError('buildingName','Required parameter requestParameters.buildingName was null or undefined when calling one.');
        }

        if (requestParameters.number === null || requestParameters.number === undefined) {
            throw new runtime.RequiredError('number','Required parameter requestParameters.number was null or undefined when calling one.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/rooms/{buildingName},{number}`.replace(`{${"buildingName"}}`, encodeURIComponent(String(requestParameters.buildingName))).replace(`{${"number"}}`, encodeURIComponent(String(requestParameters.number))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoomFromJSON(jsonValue));
    }

    /**
     */
    async one(requestParameters: OneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Room> {
        const response = await this.oneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async whenIsFreeRaw(requestParameters: WhenIsFreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AvailabilityAtResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling whenIsFree.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling whenIsFree.');
        }

        const queryParameters: any = {};

        if (requestParameters.request !== undefined) {
            queryParameters['request'] = requestParameters.request;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reservation/rooms/time/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AvailabilityAtResponseFromJSON));
    }

    /**
     */
    async whenIsFree(requestParameters: WhenIsFreeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AvailabilityAtResponse>> {
        const response = await this.whenIsFreeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
